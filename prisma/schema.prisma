// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  NA
  // PANTALONES  ADULTOS HOMBRE
  HP_28
  HP_30
  HP_32
  HP_34
  HP_36
  HP_38
    // PANTALONES  ADULTOS HOMBRE
  MP_4
  MP_6
  MP_8
  MP_10
  MP_12
  MP_14
  //ZAPTOS ADOULTOS
  ZA_36
  ZA_37
  ZA_38
  ZA_39
  ZA_40
  ZA_41
  ZA_42
  ZA_43

  //TALLA CAMISAS NINOS
  NC_4
  NC_6
  NC_8
  NC_10
  NC_12
  NC_14

  // TALLA ZAPATOS NINOS
  NZ_28
  NZ_29
  NZ_30
  NZ_31
  NZ_32
  NZ_33
  NZ_34


}

enum Gender {
  hombre
  mujer
  kids
  unisex
  NA
}

enum Role {
  admin
  superAmind
  user
}

enum Status {
  inPreparation
  onWay
  delivered
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  subCategory SubCategory[]
  Product     Product[]
}

model SubCategory {
  id       String     @id @default(uuid())
  name     String     @unique
  category Category[]
  Product  Product[]
}

model Product {
  id            String   @id @default(uuid())
  title         String
  description   String
  inStock       Int       @default(0)
  price         Float     @default(0)
  sizes         Size[]    @default([])
  slug          String    @unique
  tags          String[]  @default([])
  gender        Gender
  flatProduct   String    @default("true")
  sale          Float    @default(0)

  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  subcategory   SubCategory    @relation(fields: [subCategoryId], references: [id])
  subCategoryId String
  //relaciones
  productImage  ProductImage[]
  OrderItem     OrderItem[]
  

  createDate    DateTime?  @default(now())
  modifieldBy   String?
  modifiedDate  DateTime? @default(now())

  comments       Comments[]
  inventory      Inventory[]



  @@index([gender])
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  Product Product @relation(fields: [ProductId], references: [id])
  ProductId    String
}

//MODELO PARA USUARUIS EN BASE DE DATOS 

model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         Role      @default(user)
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  userAddress UserAddress?
  //relaction order
  Order       Order[]
  comments    Comments[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Countries {
  id   String @id @unique
  name String

  //relaciones 
  userAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String  @default("NA")

  //relaciones
  country   Countries @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

//buy order

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  total        Float
  tax          Float
  itemsInorder Int
  isPaid       Boolean   @default(false)
  status       Status    @default(inPreparation)
  paidAt       DateTime?

  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt

  //realation 

  user         User           @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  sale     Float @default(0)
  size     Size
  //relation 
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  prodcut   Product @relation(fields: [ProductId], references: [id])
  ProductId String

  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String
}

model OrderAddress {
  id             String  @id @default(uuid())
  firstName      String
  lastName       String
  address        String
  optionalAddres String?
  postalCode     String
  city           String
  phone          String

  //relation 
  country   Countries @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}


model Sizes {

  id                String  @id @default(uuid())
  size              Size   @unique
  inventory         Inventory[]
  sizeCategory      SizeCategory       @relation(fields: [sizeCategoryId], references: [id])
  sizeCategoryId    String  @default("NA")
  garmenttype       Garmenttype       @relation(fields: [garmenttypeId], references: [id])
  garmenttypeId     String   @default("NA")

    

}


model Comments{
    id            String  @id @default(uuid())
    comment       String?
    qualification Int @default(5)
    product       Product       @relation(fields: [productId], references: [id])
    productId     String
    user          User       @relation(fields: [userId], references: [id])
    userId        String
}

model Inventory {
   id         String  @id @default(uuid())
   inStock    Int @default(0)
   product    Product       @relation(fields: [productId], references: [id])
   productId  String
   sizes      Sizes       @relation(fields: [sizesId], references: [id])
   sizesId    String
   orderItem   OrderItem[]


}

model SizeCategory {
   id         String  @id @default(uuid())
   name       String  @unique
   size      Sizes[]
   
  
}
model Garmenttype {
   id         String  @id @default(uuid())
   name       String  @unique
   size      Sizes[]
  
}